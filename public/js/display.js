// ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
function updateDateTime() {
    const now = new Date();
    const dateOptions = {
        year: "numeric",
        month: "long",
        day: "numeric",
        weekday: "long",
    };
    const dateString = now.toLocaleDateString("th-TH", dateOptions);
    const timeString = now.toLocaleTimeString("th-TH", {
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
    });

    document.getElementById("current-date").textContent = dateString;
    document.getElementById("current-time").textContent = timeString;
}
setInterval(updateDateTime, 1000);
updateDateTime();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
async function fetchData(limit = 100) {
    try {
        const response = await fetch(`/get-esp32-data?limit=${limit}`);
        const data = await response.json();

        if (!Array.isArray(data) || data.length === 0) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå");
            return;
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î)
        data.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));

        // ‡∏ï‡∏±‡∏î‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
        const labels = data.map((item) =>
            new Date(item.created_at).toLocaleTimeString("th-TH", {
                hour: "2-digit",
                minute: "2-digit",
            })
        );

        const temperatures = data.map((item) => item.temperature);
        const humidities = data.map((item) => item.humidity);
        const lightIntensities = data.map((item) => item.LightIntensity);
        const weights = data.map((item) => item.weight);

        updateChart(tempChart, labels, temperatures);
        updateChart(humidityChart, labels, humidities);
        updateChart(lightChart, labels, lightIntensities);
        updateChart(weightChart, labels, weights);
        updateAllStatusChart(
            labels,
            temperatures,
            humidities,
            lightIntensities,
            weights
        );
    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
function updateChart(chart, labels, data) {
    chart.data.labels = labels;
    chart.data.datasets[0].data = data;
    chart.update();
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const updateAllStatusChart = (
    labels,
    temperatures,
    humidities,
    lightIntensities,
    weights
) => {
    allStatusChart.data.labels = labels;
    allStatusChart.data.datasets[0].data = temperatures;
    allStatusChart.data.datasets[1].data = humidities;
    allStatusChart.data.datasets[2].data = lightIntensities;
    allStatusChart.data.datasets[3].data = weights;
    allStatusChart.update();
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
const createChart = (id, label, color) => {
    return new Chart(document.getElementById(id).getContext("2d"), {
        type: "line",
        data: {
            labels: [],
            datasets: [
                {
                    label,
                    data: [],
                    borderColor: color,
                    fill: true,
                    tension: 0.3, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
                    pointRadius: 1,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    title: { display: true, text: "‡πÄ‡∏ß‡∏•‡∏≤" },
                    reverse: false, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô x ‡πÑ‡∏•‡πà‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
                },
                y: {
                    title: { display: true, text: label },
                },
            },
        },
    });
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
const tempChart = createChart("tempChart", "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)", "red");
const humidityChart = createChart("humidityChart", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)", "blue");
const lightChart = createChart("lightChart", "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á", "yellow");
const weightChart = createChart("weightChart", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (g)", "cyan");

const allStatusChart = new Chart(
    document.getElementById("allStatusChart").getContext("2d"),
    {
        type: "line",
        data: {
            labels: [],  // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤
            datasets: [
                {
                    label: "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)",
                    data: [],
                    borderColor: "red",
                    // backgroundColor: "rgba(255, 0, 0, 0.2)",
                    // fill: true,
                    tension: 0.1,
                    yAxisID: "y-temp",
                },
                {
                    label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)",
                    data: [],
                    borderColor: "blue",
                    // backgroundColor: "rgba(0, 0, 255, 0.2)",
                    // fill: true,
                    tension: 0.1,
                    yAxisID: "y-humidity",
                },
                {
                    label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á (lux)",
                    data: [],
                    borderColor: "yellow",
                    // backgroundColor: "rgba(255, 255, 0, 0.2)",
                    // fill: true,
                    tension: 0.1,
                    yAxisID: "y-light",
                },
                {
                    label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (g)",
                    data: [],
                    borderColor: "green",
                    // backgroundColor: "rgba(0, 255, 0, 0.2)",
                    // fill: true,
                    tension: 0.1,
                    yAxisID: "y-weight",
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    title: { display: true, text: "‡πÄ‡∏ß‡∏•‡∏≤" },
                    ticks: { autoSkip: true, maxTicksLimit: 10 },
                },
                "y-temp": {
                    type: "linear",
                    position: "left",
                    title: { display: true, text: "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)" },
                    min: 0,
                    max: 50,
                },
                "y-humidity": {
                    type: "linear",
                    position: "right",
                    title: { display: true, text: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (%)" },
                    min: 0,
                    max: 100,
                    grid: { drawOnChartArea: false },
                },
                "y-light": {
                    type: "logarithmic", // ‡πÉ‡∏ä‡πâ‡∏™‡πÄ‡∏Å‡∏•‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°
                    position: "left",
                    title: { display: true, text: "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á (lux)" },
                    min: 1, // ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ 0 ‡∏Å‡∏±‡∏ö logarithmic
                    max: 100000, // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
                    grid: { drawOnChartArea: false },
                },
                "y-weight": {
                    type: "logarithmic", // ‡πÉ‡∏ä‡πâ‡∏™‡πÄ‡∏Å‡∏•‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°
                    position: "right",
                    title: { display: true, text: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (g)" },
                    min: 1,
                    max: 10000000, // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
                    grid: { drawOnChartArea: false },
                    ticks: {
                        callback: function (value) {
                            return value.toFixed(2) + " g";
                        },
                    },
                },
            },
            plugins: {
                tooltip: {
                    mode: "index",
                    intersect: false,
                    callbacks: {
                        label: function (tooltipItem) {
                            let label = tooltipItem.dataset.label || "";
                            let value = tooltipItem.raw;
                            if (label.includes("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")) {
                                return `${label}: ${value.toFixed(2)} g`;
                            }
                            return `${label}: ${value}`;
                        },
                    },
                },
                legend: {
                    position: "top",
                },
            },
        },
    }
);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
document.getElementById("timeRange").addEventListener("change", function () {
    const selectedValue = this.value;
    console.log(`üì° ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${selectedValue} ‡∏Ñ‡πà‡∏≤`);
    fetchData(selectedValue);
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ 100 ‡∏Ñ‡πà‡∏≤)
setInterval(() => {
    const selectedValue = document.getElementById("timeRange").value || 100;
    fetchData(selectedValue);
}, 5000);

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
fetchData(100);
